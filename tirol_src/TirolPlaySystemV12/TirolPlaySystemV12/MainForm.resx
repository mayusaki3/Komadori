<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="timBraInt.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAMDAAAAAAGACoHAAAFgAAACgAAAAwAAAAYAAAAAEAGAAAAAAAABsAAAAAAAAAAAAAAAAAAAAA
        AAAiIjsgITkfIDkeHzgfIDkdHjcXGDEYGTIXGDEbHDUYGTIWFjAZGjQXGDEVFi8VFjAUFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8VFjAVFjAVFjAVFjAVFjAV
        FjAUFS8VFjAVFi8WFzAVFjAVFjAVFjAWFzEVFi8VFjAVFjAVFjAWFjAVFjAVFi8VFjAVFjAUFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8VFjAUFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS4UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS4UFS8UFS8UFS4U
        FS4UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8TFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8TFS4UFS8UFS8UFS8TFS4UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8TFS4UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8zNEsUFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8kJT0UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8VFjAVFjAUFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8XGDIZGjQVFjAUFS8WFzEUFS8VFjAUFS8WFzEXFzEVFjAUFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8VFjAUFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8VFS4UFS8TFi4U
        FS4UFS8UFS8UFS8UFS8UFS8UFS8UFS8SFS8SFS8XFzEUFS8UFTAVFjAUFS8UFjAUFS4VFjAYGDETFS8U
        FS8YFzEZGjMUFi8UFS8ZGjMYGTIUFS4VFjAVFzAUFS8UFS8VFi8VFjAUFS8WFzEWFzEVFjAVFjAZGjMZ
        GTITFC8UFi4VFS8UFDAWFi0SFDARFi4VFy4UFS8UFS8UFS8UFS8UFC8UFTASFS4SFi0UFS4WEy8TFDAS
        FC8WFi0SFS4SFS4WFy4RFS4SFCwSFi0XFS4QFCwPEywTFS8QFC0RFS0SFS0TFi4WFywTEy8UFTEWFjAU
        FC8TFDAUFS8SFC0RFCoSFisSFS8TFCwUFS0TFTAUFi4VGS0VFDERGC4PFDMQFDEWGTATFS8TFS8TFS8T
        FS4QEy8OETgTEz0VEi4WFi0RFS8QGi0QFysXEykNHD4NGj8aFjAQFCoLHTIOGzEaFi4QGC4TFjEZFDAV
        GDEIFSsJFSwVFi0ZFy0RFDASFzETFigPGCQNGSYVFioXFjIVFDIVFjAVFTEOFDMPFC4XFiYQDigQFiIV
        EiQKFCYVFyQZEh8VFSYTFi8TFi8TFi8SFS0PFSoMIm4ZOKoLHWwLEzQSGCkQFC4PFC8TGj8cY6Efc7kQ
        HkkXJDUxnKAgiZAIIzQTFy0LFy0UEiwNHjQsgIotgIgRIzUWEjEIHSwGHCULIxs+dTI5eikRHRoQHBkQ
        EiYYEzYaFzQSEic1KBhxVhJSLhtEMwtwWBEpHxZPQBJfRBQhGBcTFi8TFi8TFi8SFSwWESkII4kURtAM
        JHwNDy4WEycSGjAOFygUGzkYdLEWhMYMJUoOMT86zs0ytbYLJTURFisIGSkmFiwbJTY829M+3tcbMEAM
        ECcWWRY/jzIgWhhNpUZAqjwYSiJBgSkhThQEGR4LFioVEhpsTwTfsweiYRObdQ7ZtgNoQROvhg/ClBI1
        Hw4SFi8RFS4RFS4RFS0MECwFElQGJ5gJD0QXGCUVGC0QFy0PFyMfGCoDNGMFSXIeGDETFi0TYWkWS1Uf
        ECgXFzALGSsaHTAVSlQofX8TYWIKGSYJCxs3gi9k3DssbicMNR8MMiYlYi1W3zs+jDEQDQ8UFysFFClA
        KRaSZhBTMQZOPBONYxFDJwtkSxduUxkrGw4SFi8RFS4RFS4RFS0aDyIJLpIBSfYQL5sKEC0NFToMFDET
        DysPIksXjdYPmOkTKloVPkw16uEntLAPHjAMFy8QDCQVT1ox/fMswLkHEB8MHSoTOSUUSCYoVywUHxkT
        ExwMDxwWJiUtaDgWRyEcNRYVFyAKEidJOw22fBBmOhAJCSMIFiMQExwYFh8eGSEYFB0SFi8RFS4RFS4R
        FS4ODioJHm4SQ9ASIHAPEikPFDMPGC0OFikIFjYSa64Tg8oKHUYJMkA7zsopnJ0KGiwNFi4XDSoLO0gu
        zMQuk5YXDycSISlQ0jdUsEERISIcEyQXFy0KGicPEhsUGRlHmjdJxTIWRg0UExpuVQnmsQGHWwUWDh0Z
        Hh8SGzQNEy0XGS4WFy4SFi8RFS4RFS4RFS4GDzAJFlAePLEVGFAUFyUQFS4RGSsOHSkIECgdXJYlfbcT
        Gj4LHTEeg4YNWV4WFSkYECoRRVk939cpnpcWFy0OFiUUIRlLqk9CjzUHIh0KFx4MFisNGDASEzELIBsw
        hiVFtEAJMgwKExUyIBVtPBE1Ig8JEx8dFS8TEzIRFC8WFy8WFi4SFi8RFS4RFS4SFS0aDR4HMJkHWP8V
        OagHDCoMFDgMFzETECwHH0oUleMQp/4PK2AaSFRB//cmwLkTIzQLCiMjSl1A9ugjn5sGFCwHHxwiXicy
        dDULLgkQHBYWHyYYHS0XEi8aDzMNEh0FKxAtcTEhQhkNFBtaQBPOmQ5zVA4OEyILGC8WFy4WFy4UFS4V
        FS8SFi8RFS4RFS4RFS4MEScGHFgLObYVIV4RGCAPFywTFjEVFyoWFS0LS4EMX5AXGzkMKDwpnJ0fdXkL
        FSgZL0UjipIplpQILDsODy4kJBxErktN2DkhTzMNCx0YFjIMFioLFzEUGigXDSkdUyZZ1zM+jCUFEQ5d
        RQvUmQyCVggaExoVFjEUFi0UFi4TFS8UFS8SFi8RFS4RFS4RFS4NDysKHmwcTOYHGnwQEiocGCccFDAa
        EC8OGzcVcrcSg88IG0UPLj0ut68bd3oOBR0gaW01//83s7INDCMRHDANFhkwbjQ3lTcQJSAPEy4QFy0S
        Fy4OFyoVGigXGCwOKxg9lSs0YSQHDRc0JR14Qg8yHhsDFiIUFzUWFS8UFi4UFS8UFS8SFi8RFS4RFS4S
        FS0JCygRK4QbV/wSL6AIDjEYGCwNFjEHEjELKEceld0Xo/gNK1opVGFH//IsuLcTHjgVW182pZYkVWUI
        DzAUFi4bNx0/pTIxfSgNFg4YHCkTHSgSFS0QFjUWDzsWDzMIGx4edB0wei0FFxt0VRPltgCGTgcVERoX
        FyoVGC0UFi8UFS8UFS8SFi8RFS4RFS4RFi8DECoJFEoWL6QUFkoSGSAMFy0VFi4IFikSHCYOOG0LQnUa
        FzASHTMab3ASS1geVGg88ektl54CEDYPFDkWCCEbTSdOwzhYqjYdKhUWFCgSGCsVGS4JHSQHHyUNESsK
        KRI7rh1QwDMRMA9UNRK5exZRLhYKFSMLHCwTFiwVFi8UFS8UFS8SFi8RFS4RFS4RFC0NDSgVMIgQUvwP
        NKsADTgSEzAdEDUdDzcWJkgdkNsTmeoQKlcRQlE97eMzl58LSFwv5d8jioghhIUniIMYHDYNFScQTBcK
        SBwLDCUXFDQSGSoVFTANGC8PGCUfFSwTDxwbUhgjSx8SEhpaPRHEhBBbLhMRESoQFzMTFS0UFi4UFS8U
        FS8SFi8RFS4RFS4RFS4QCicNGmgbRdwIGn4IDTMRGTQLGykdEysRGzEGbK8SgNAZFkcVOk0q7eEvlqAX
        FDQYOkcONUhA4+JH+OkKN00NHyQ2lzc6pysaOx8KFCcSGC4YFC8PGyoHGikLETAcPylDrCgxfhkHFhJw
        UxHkswV+RAUXDx4cES8UFy0UFi4UFS8UFS8SFi8QFSsRFisSFy0QGSIQF0wMLqQSF1cZHB8LGCwQEjID
        GzIMFyceT4kVYpoOGjgbHTgkjY0ZVmUODi0TECYVGikgeHkod3wNGzkTIRxGlzFIq0cWOyAGGBsQHCga
        FDEbEjoVEzYKESEWOiFMqTw4gCYFIAVAMA2OWhkwIhMEHRoQGiwVFC0UFi4UFS8UFS8RGSwNFioPFi0P
        FyoEESQiKZwPXf8PL74PDSgOGTMIFjAEEi4NKEEWlt0MqPsQK1wmVWJE//cpsa4GGTMJGi4TFjAFHS8t
        naAomZwNKikcMxgxczYRKRgQESISGi0UFysZEy4PFy0QFykYOyIxZScSKxIQCyKBWBDmqghiPAgWECER
        GSkVFy8UFi4UFS8UFS8QGSUPFDEMEDsPFDcPEzAHHF0TP6wSIl4MFycZFicfEzAXEy8YEioLUYwTZ50j
        FzcQKD0foZcraXMhETEFGi0PECkVKjw15dss6eMIIScjTS5N1jRBhzUWHBoWEyUMHTAHHTAPEigQKCNE
        rCJSyy4PLhEJDCJbRw64fxFRLBcVESQUFSsVFjAUFi4UFS8UFS8dFTAXGSsTGywWETAYDisHJWQSRMcQ
        GmAWFiYTGC4RGi8EFjAJHTsVdLwYh9ERHkgIM0Mfv7EffYMREC4SGC4XFS8ZQU0fcXQcTVoOEiEVNyk9
        oTUeaCQAFwAcHhsSGiQHFi8MEi4HGgo2fyE3kS0KJhsNFyVNOQ6XWxg4HxcHGxcMHyQTFi4UFi4UFS8U
        FS8hDzsIECoGGCMeFywRCyMOM4kLWf8QKaQKDCcKGzEODy4LDy4YKkYcj9gNm+8NHVEsWmgv/+snurYF
        GzUHDiMXLEIr29Iuyb8YHzMNGi0TFyAMJRU0fUFAhEYNHQwcEyYSFC4TMSNBbC8cNSQGFxoLIxgMDReM
        XhLntQdiSAYVEBsZGCcXGC8UFi4UFS8UFS8IDi4JHmkJHWgIDywPF1EOG28FI2sWFmYNGU4LEi8UGGoO
        GEseDykUPXUKUYoXFDkPGzEceXQWSFQRJ0IujJUSVWMswrkxua4FJjYFFCwXEygUJBtKskFl0lUOKREb
        IikGHQ0pWSRa2zs+mSERFxERFScDGhpONgyKWQszIBgNFCQWEzEVFTEUFi4UFS8UFS8EFTUcT8wdT9oG
        GVgeR8wfRNsID1YkQ9IVSdwXInQJVPAMNbYBG1EPi80XnesLKU4VSlM95Ngrj48cYGlB9/g8pqwPMUAT
        Hy4TFCsTGDIJFSwYGi4iTCsZUR0URBlRq0gqjRsULRQibyYVUhoRFyUVFDUGFSRaPgyuZA5HHxYMGCUX
        Fy0WFi8UFi8UFS8UFS8KETIKMZMNNKMQEUkUNaYROaYKEk8TOasKO7kRGF4TPb0VJ5MHFDkTYpUcaq8K
        ITwWPUc8vbwqeHwKKDAbhIEWTVoDECUSGDEaFS4UFy4NGS8XGS4SCiwCAhwaQiZHo0EyiSkMEhYMDhoP
        ECYTGisQGioOESJuVAvOjhxcMhkIEyYSFi4WFi8UFi8UFS8UFS8QFCkMEjUOETgaFCoPDjcRFjYREywN
        EToMET8SEC4NDjwTEjMYGSoLGC0JFi4TGS8VFC8JHTMRGzAWGC4PFCoOEysQGTATGTATFi4SFi4SGC8L
        GiwTGzAUFikQGB8TKBoMIxcSFycSFyoTGC0TGC4TGCsQEygpIxVHMhclFh0RFyYQFi0UFS8UFS8UFS8U
        FS8UGC4WFywXFi0UFjAYFy8WGCoRFi8WFi4VFSsPFi8VFysRGSsOGC8VFy4VGC4QFjEVEzAQFjASFC8W
        FzETFi8YFS8WFS8TFS4UGDATFi8UFi8SFy4UFi0XFi4XFS8XFjAWFjATFy8TFTETFTETFi8TGC0UFy4T
        FioUFSoTFCsVGCwTFy8UFS8UFS8UFS8UFS8TFi8UFS4UFS8RFTATFS8TFS4RFTETFTATFS8RFi8UFS0S
        FS8SFTIVFC8UFDATFDEXFjESFC8VFjAUFS8SFi8UFi8VFS8UFi8TFS4UFi8UFi8VFS8UFS4VFS8UFTAU
        FDIUFDEUFi8UFTATFDATFS8UFi8TFi4TFjATFjITFS8UFi4VFS8UFS8UFS8UFS8UFS8UFS8UFS8UFS8U
        FS8UFS8UFS8UFS8UFTAUFS8UFS4UFS8UFTAUFS8UFS4UFS8UFS8TFS8UFS8UFS8TFS8UFS8TFS8TFS8U
        FS8UFS8UFS8UFS8UFS8UFS8UFS8TFS8UFS8UFS8UFi4UFS8UFTAUFS8UFS8UFS4UFS8VFS8UFS8UFS8V
        FS8UFS8UFS8UFS8UFS8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>